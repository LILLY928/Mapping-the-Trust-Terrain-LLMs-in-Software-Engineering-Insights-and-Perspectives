# -*- coding: utf-8 -*-
"""Trust factors graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g8da-rZuCHsrit0uz3Y-Fvu8VXUWl1Wx
"""

#stacked bar graph

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

new_data = {
    "Trust Antecedents": [
        "Accuracy",
        "Controllability",
        "Interpretability",
        "Robustness",
        "Community Engagement",
        "Workflow Integration",
        "Endorsement",
        "Ethicality",
        "Source Reputation",
    ],
    "Code Generation": [16, 10, 7, 10, 3, 5, 4, 6, 6],
    "Test Case": [4, 3, 2, 2, 1, 0, 0, 1, 0],
    "Program Repair": [11, 5, 8, 6, 1, 3, 3, 4, 3]
}

df_new = pd.DataFrame(new_data).set_index("Trust Antecedents")
df_new = df_new[::-1]

# total number of selections
total_selections = 124

df_new_pct = df_new.div(total_selections).mul(100)

# the calculated total percentage
total_percentages = {
    "Accuracy": 25,
    "Controllability": 14.516129,
    "Interpretability": 13.709677,
    "Robustness": 14.516129,
    "Community Engagement": 4.032258,
    "Workflow Integration": 6.451613,
    "Endorsement": 5.645161,
    "Ethicality": 8.870968,
    "Source Reputation": 7.258065
}

plasma_colors = sns.color_palette("plasma", n_colors=3)
fig, ax = plt.subplots(figsize=(10, 6))

bars1 = ax.barh(df_new_pct.index, df_new_pct['Code Generation'], color=plasma_colors[0], label='Code Generation')
bars2 = ax.barh(df_new_pct.index, df_new_pct['Test Case'], left=df_new_pct['Code Generation'], color=plasma_colors[1], label='Test Case')
bars3 = ax.barh(df_new_pct.index, df_new_pct['Program Repair'], left=df_new_pct['Code Generation'] + df_new_pct['Test Case'], color=plasma_colors[2], label='Program Repair')

# add total percentage labels to the right of each bar
for i, (bar1, bar2, bar3) in enumerate(zip(bars1, bars2, bars3)):
    total_width = bar1.get_width() + bar2.get_width() + bar3.get_width()
    antecedent = df_new.index[i]
    ax.text(total_width+0.1, bar3.get_y() + bar3.get_height() / 2,
            f'{total_percentages[antecedent]:.1f}', va='center', ha='left')

ax.set_xlabel('Percentage of Total Selection')
ax.set_ylabel('Trust Antecedents')
ax.legend()

# add percentage sign to the x-axis labels
vals = ax.get_xticks()
ax.set_xticklabels([f'{x:.0f}%' for x in vals])

plt.tight_layout()
plt.show()

## new table

new_data = {
    "Trust Antecedents": [
        "Accuracy",
        "Controllability",
        "Interpretability",
        "Robustness",
        "Community Engagement",
        "Workflow Integration",
        "Endorsement",
        "Ethicality",
        "Source Reputation",
    ],
    "Code Generation": [16, 10, 7, 10, 3, 5, 4, 6, 6],
    "Test Case": [4, 3, 2, 2, 1, 0, 0, 1, 0],
    "Program Repair": [11, 5, 8, 6, 1, 3, 3, 4, 3]
}
df=pd.DataFrame(new_data)

#number of respondent for each task based on the qualtrics report
denominators = {
    "Code Generation": 17,
    "Test Case": 4,
    "Program Repair": 11
}

df["Code Generation %"] = df["Code Generation"] / denominators["Code Generation"] * 100
df["Test Case %"] = df["Test Case"] / denominators["Test Case"] * 100
df["Program Repair %"] = df["Program Repair"] / denominators["Program Repair"] * 100

df_code_generation_pct = df.sort_values(by="Code Generation %", ascending=False)
df_test_case_pct = df.sort_values(by="Test Case %", ascending=False)
df_program_repair_pct = df.sort_values(by="Program Repair %", ascending=False)

# plot for code gen
plt.figure(figsize=(10, 6))
sns.barplot(data=df_code_generation_pct, x="Trust Antecedents", y="Code Generation %", palette="mako")
plt.title("Trust Antecedents - Code Generation", fontsize=16)
plt.xlabel("Trust Antecedents", fontsize=14)
plt.ylabel("Percentage", fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# plot for test gen
plt.figure(figsize=(10, 6))
sns.barplot(data=df_test_case_pct, x="Trust Antecedents", y="Test Case %", palette="mako")
plt.title("Trust Antecedents - Test Case", fontsize=16)
plt.xlabel("Trust Antecedents", fontsize=14)
plt.ylabel("Percentage", fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# plot for repair
plt.figure(figsize=(10, 6))
sns.barplot(data=df_program_repair_pct, x="Trust Antecedents", y="Program Repair %", palette="mako")
plt.title("Trust Antecedents - Program Repair", fontsize=16)
plt.xlabel("Trust Antecedents", fontsize=14)
plt.ylabel("Percentage", fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

new_data = {
    "Trust Antecedents": [
        "Accuracy",
        "Controllability",
        "Interpretability",
        "Robustness",
        "Community Engagement",
        "Workflow Integration",
        "Endorsement",
        "Ethicality",
        "Source Reputation",
    ],
    "Code Generation": [16, 10, 7, 10, 3, 5, 4, 6, 6],
    "Test Case": [4, 3, 2, 2, 1, 0, 0, 1, 0],
    "Program Repair": [11, 5, 8, 6, 1, 3, 3, 4, 3]
}
df=pd.DataFrame(new_data)

#number of respondent for each task based on the qualtrics report
denominators = {
    "Code Generation": 17,
    "Test Case": 4,
    "Program Repair": 11
}

df["Code Generation %"] = df["Code Generation"] / denominators["Code Generation"] * 100
df["Test Case %"] = df["Test Case"] / denominators["Test Case"] * 100
df["Program Repair %"] = df["Program Repair"] / denominators["Program Repair"] * 100

df_code_generation_pct = df.sort_values(by="Code Generation %", ascending=False)
df_test_case_pct = df.sort_values(by="Test Case %", ascending=False)
df_program_repair_pct = df.sort_values(by="Program Repair %", ascending=False)


# Calculate the total count for all tasks combined
df["Total Count"] = df["Code Generation"] + df["Test Case"] + df["Program Repair"]

# Sort the DataFrame by the total count
df_sorted = df.sort_values(by="Total Count", ascending=False)

# Melt the DataFrame to long format for easier plotting with Seaborn
df_melted_pct = df_sorted.melt(id_vars="Trust Antecedents",
                               value_vars=["Code Generation %", "Test Case %", "Program Repair %"],
                               var_name="Task",
                               value_name="Percentage")

# Rename tasks for better readability in the plot
df_melted_pct["Task"] = df_melted_pct["Task"].replace({
    "Code Generation %": "Code Generation",
    "Test Case %": "Test Case",
    "Program Repair %": "Program Repair"
})

# Set the font scale for Seaborn
sns.set(font_scale=1.5)

# Plotting the combined bar chart
plt.figure(figsize=(15, 9))
bar_plot = sns.barplot(data=df_melted_pct, x="Trust Antecedents", y="Percentage", hue="Task", palette="mako_r")

# Customize the plot
plt.xlabel("Trust Antecedents", fontsize=20)
plt.ylabel("Percentage", fontsize=20)
plt.xticks(rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.legend(title='Task', title_fontsize=20, fontsize=20)
plt.tight_layout()

# Show the plot
plt.savefig("task_rundown.png", bbox_inches='tight')

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive/')

file_path = '/content/drive/MyDrive/exp_in_llms.xlsx'

df = pd.read_excel(file_path)

df.set_index(df.columns[0], inplace=True)

df_percentage = df * 100

df_percentage_rounded = df_percentage.round(0)

df_percentage_rounded_str = df_percentage_rounded.astype(int).astype(str) + '%'

plt.figure(figsize=(12, 6))
sns.set(font_scale=1.5)
heatmap = sns.heatmap(df_percentage, annot=df_percentage_rounded_str, fmt="", cmap="mako_r", cbar=True)

heatmap.set_xlabel('Experience in LLMs',fontsize=20)
heatmap.set_ylabel('Trust Antecedents',fontsize=20)

plt.savefig("exp_in_llms.png",bbox_inches='tight')

file_path = '/content/drive/MyDrive/exp_in_se.xlsx'

df = pd.read_excel(file_path)

df.set_index(df.columns[0], inplace=True)

df_percentage = df * 100

df_percentage_rounded = df_percentage.round(0)

df_percentage_rounded_str = df_percentage_rounded.astype(int).astype(str) + '%'

plt.figure(figsize=(12, 6))
sns.set(font_scale=1.5)
heatmap = sns.heatmap(df_percentage, annot=df_percentage_rounded_str, fmt="", cmap="mako_r", cbar=True)

heatmap.set_xlabel('Experience in SE',fontsize=20)
heatmap.set_ylabel('Trust Antecedents',fontsize=20)

plt.savefig("exp_in_se.png",bbox_inches='tight')